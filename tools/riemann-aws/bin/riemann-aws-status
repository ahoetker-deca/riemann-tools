#!/usr/bin/env ruby
# frozen_string_literal: true

Process.setproctitle($PROGRAM_NAME)

require 'riemann/tools'

$0 = __FILE__ # Let's not expose our AWS keys in the process list

module Riemann
  module Tools
    class AWS
      include Riemann::Tools
      require 'fog'
      require 'date'

      opt :access_key, 'AWS access key', type: String
      opt :secret_key, 'Secret access key', type: String
      opt :region, 'AWS region', type: String, default: 'eu-west-1'

      opt :retirement_critical, 'Number of days before retirement. Defaults to 2', default: 2
      opt :event_warning, 'Number of days before event. Defaults to nil (i.e. when the event appears)', default: nil

      def initialize
        creds = if opts.key?('secret_key') && opts.key?('access_key')
                  {
                    aws_secret_access_key: opts[:secret_key],
                    aws_access_key_id: opts[:access_key]
                  }
                else
                  { use_iam_profile: true }
                end
        creds['region'] = opts[:region]
        creds['provider'] = 'AWS'
        @compute = Fog::Compute.new(creds)
      end

      def tick
        # XXX: needs work:
        #   * instance_status and status seems unused
        #   * where is inject comming from
        # It looks line the only needed line for the 2 next paragraph is the one that assigns hosts.
        instance_status = @compute.describe_instance_status.body['instanceStatusSet']
        status = instance_status.each_with_object({}) do |i, acc|
          acc[i.delete('instanceId')] = i
        end

        hosts = @compute.servers.select { |s| s.state == 'running' }
        inject([status, {}]) do |(astatus, acc), host|
          acc[host.private_dns_name] = astatus.delete(host.id)
          [astatus, acc]
        end[1]

        hosts.each do |host, host_status|
          host_status['eventsSet'].each do |event|
            before, _after = %w[notBefore notAfter].map { |k| Date.parse event[k].to_s if event[k] }

            ev = { host: host,
                   service: 'aws_instance_status',
                   description: "#{event['code']}\n\nstart #{event['notBefore']}\nend #{event['notAfter']}\n\n#{event['description']}",
                   state: 'ok',
                   ttl: 300 }

            ev2 = if (event['code'] == 'instance-retirement') &&
                     (Date.today >= before - opts[:retirement_critical])
                    { state: 'critical' }
                  elsif opts[:event_warning] && (Date.today >= before - opts[:event_warning])
                    { state: 'warning' }
                  else
                    { state: 'warning' }
                  end

            report ev.merge(ev2)
          end
        end
      end
    end
  end
end

Riemann::Tools::AWS.run
